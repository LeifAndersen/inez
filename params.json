{"name":"Inez","tagline":"A Constraint Solver","body":"Inez - A Constraint Solver\r\n==========================\r\n\r\nIntroduction\r\n------------\r\n\r\nInez is a constraint solver.\r\n\r\nInez implements the *ILP Modulo Theories* scheme, as described in a\r\n[CAV paper][cav2013]. Simply put, we combine a Mathematical\r\nProgramming solver with background solvers.\r\n\r\nInez is OCaml-centric. The preferred mode of interacting with the\r\nsolver is via scripts written in a Camlp4-powered [superset of\r\nOCaml][langintro].\r\n\r\nInez is a research prototype, and may contain serious bugs. You should\r\nnot use it in production.\r\n\r\nDependencies\r\n------------\r\n\r\n### Unix\r\n\r\nInez is known to work on x86_64 GNU/Linux and Mac OS X. Other modern\r\nUnixen should work, as long as all dependencies are satisfied.\r\n\r\nInez does not work on Windows. We depend quite heavily on\r\n[Jane Street Core][jsgithub], which is Unix-only.\r\n\r\n### SCIP\r\n\r\nInez depends on the [SCIP optimization suite][scip], version\r\n3.1.x. The SCIP optimization suite is available without charge for\r\nacademic and non-commercial purposes. For other purposes, a license\r\nagreement is required.\r\n\r\nOnce you obtain the \"optimization suite\" distribution, the following\r\nrecipe suffices (applied to the toplevel directory):\r\n\r\n    make scipoptlib \\\r\n        SHARED=true \\\r\n        READLINE=false \\\r\n        ZLIB=false \\\r\n        GMP=false \\\r\n        ZIMPL=false\r\n\r\nThe `.so` is under `lib/`. Create a symbolic link to it as follows:\r\n\r\n    ln -s libscipopt-3.1.0.linux.x86_64.gnu.opt.so libscipopt.so\r\n\r\n### C and C++ Libraries and Tools\r\n\r\nBuilding Inez requires GCC (C++ frontend included). We also depend on\r\nBoost. Fetch and untar a [fresh tarball][boost].\r\n\r\n### OCaml Libraries and Tools\r\n\r\nInez requires OCaml 4.02 or newer. Additionally, you will need recent\r\nversions of the following packages:\r\n\r\n- `async`\r\n- `camlidl`\r\n- `camlp4`\r\n- `comparelib`\r\n- `core`\r\n- `herelib`\r\n- `ocamlfind`\r\n- `ocaml_plugin`\r\n- `omake`\r\n- `sexplib`\r\n\r\nThe best way to obtain the above is via [OPAM][opam].\r\n\r\nInstallation\r\n------------\r\n\r\nOnce all dependencies are satisfied, you have to:\r\n\r\n- Copy `OMakefile.config.sample` to `OMakefile.config`.\r\n- Adapt `OMakefile.config` for your setup.\r\n- Type `omake frontend/inez.opt` to build Inez.\r\n\r\n`inez.opt` is dynamically linked against `libscipopt.so`.  Modify\r\n`LD_LIBRARY_PATH` so that the dynamic linker can find this shared\r\nlibrary. On OS X, you should set `DYLD_FALLBACK_LIBRARY_PATH` in place\r\nof `LD_LIBRARY_PATH`.\r\n\r\n`inez.opt` accepts a single argument for the input program. Some\r\nexamples can be found under `frontend/examples`.\r\n\r\n[jsgithub]: http://janestreet.github.io/\r\n[scip]: http://scip.zib.de/download.shtml\r\n[boost]: http://www.boost.org/users/download/\r\n[opam]: http://opam.ocamlpro.com/\r\n[cav2013]: http://www.ccs.neu.edu/home/vpap/pub/cav-2013.pdf\r\n[langintro]: https://github.com/vasilisp/inez/wiki/Inez-Language","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}