#use "topfind";;
#require "core";;
#print_depth 4;;

open Core.Std;;

module Id = Lang_ids.Make (struct end);;
module S = Solver.Make(Scip)(Id)

let ctx = S.make_ctx ();;

let constrain g = S.assert_formula ctx g;;

let solve () = S.solve ctx;;

let gen_id = Id.gen_id

let fresh_int_var () =
  Lang_abstract.M.M_Var (Id.gen_id Lang_types.Y_Int);;

let fresh_bool_var () =
  Formula.F_Atom
    (Lang_abstract.A.A_Bool
       (Lang_abstract.M.M_Var (Id.gen_id Lang_types.Y_Bool)));;

let ideref = function
  | Lang_abstract.M.M_Var v ->
    S.deref_int ctx v
  | _ ->
    None;;

let bderef = function
  | Formula.F_Atom
      (Lang_abstract.A.A_Bool (Lang_abstract.M.M_Var v)) ->
    S.deref_bool ctx v
  | _ ->
    None;;

let toi x =
  Lang_abstract.M.M_Int (Int63.of_int x);;
